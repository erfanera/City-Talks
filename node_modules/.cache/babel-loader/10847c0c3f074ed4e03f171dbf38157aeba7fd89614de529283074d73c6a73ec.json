{"ast":null,"code":"var _jsxFileName = \"D:\\\\IaaC\\\\DataVis\\\\data_vis_project\\\\code\\\\interactive-map\\\\src\\\\components\\\\StreetView.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { StreetView as StreetViewContainer, GraphLoadingMessage, AssetIDcontainer, AssetIDTextArea, AssetIDConfirmButton } from '../style_Desire';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StreetView = ({\n  coordinates,\n  onError\n}) => {\n  _s();\n  const [image, setImage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [selectedId, setSelectedId] = useState(\"\");\n  const handleConfirmSelection = async () => {\n    if (!selectedId) {\n      alert(\"Please enter an Asset ID\");\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/register-point\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          id: selectedId\n        })\n      });\n      const data = await response.json();\n      if (data.error) {\n        throw new Error(data.error);\n      }\n      if (data.streetView && data.streetView.image) {\n        setImage(`data:image/jpeg;base64,${data.streetView.image}`);\n      } else {\n        throw new Error('No street view available for this location');\n      }\n    } catch (err) {\n      setError(err.message);\n      if (onError) onError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const fetchStreetView = async () => {\n    if (!coordinates || !coordinates.latitude || !coordinates.longitude) {\n      setError('No coordinates provided');\n      if (onError) onError('No coordinates provided');\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('http://127.0.0.1:5000/get-street-view', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(coordinates)\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to fetch street view');\n      }\n      if (data.image) {\n        setImage(`data:image/jpeg;base64,${data.image}`);\n      } else {\n        throw new Error('No image data received');\n      }\n    } catch (err) {\n      setError(err.message);\n      if (onError) onError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch street view when coordinates change\n  React.useEffect(() => {\n    if (coordinates) {\n      fetchStreetView();\n    }\n  }, [coordinates]);\n  return /*#__PURE__*/_jsxDEV(StreetViewContainer, {\n    children: [isLoading && /*#__PURE__*/_jsxDEV(GraphLoadingMessage, {\n      children: \"Loading street view...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 27\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        textAlign: 'center',\n        padding: '20px'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }, this), image ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: image,\n      alt: \"Street View\",\n      style: {\n        width: '100%',\n        height: '100%',\n        objectFit: 'cover',\n        borderRadius: '8px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        padding: '20px',\n        color: '#666'\n      },\n      children: \"No street view available for this location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(AssetIDcontainer, {\n      children: [/*#__PURE__*/_jsxDEV(AssetIDTextArea, {\n        placeholder: \"Enter Asset ID here\",\n        value: selectedId,\n        onChange: e => setSelectedId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AssetIDConfirmButton, {\n        onClick: handleConfirmSelection,\n        children: \"Confirm Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n_s(StreetView, \"Zy0NyJgAIzdV56TEfMS9Xl8iTvU=\");\n_c = StreetView;\nexport default StreetView;\nvar _c;\n$RefreshReg$(_c, \"StreetView\");","map":{"version":3,"names":["React","useState","StreetView","StreetViewContainer","GraphLoadingMessage","AssetIDcontainer","AssetIDTextArea","AssetIDConfirmButton","jsxDEV","_jsxDEV","coordinates","onError","_s","image","setImage","isLoading","setIsLoading","error","setError","selectedId","setSelectedId","handleConfirmSelection","alert","response","fetch","method","headers","body","JSON","stringify","id","data","json","Error","streetView","err","message","fetchStreetView","latitude","longitude","ok","useEffect","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","textAlign","padding","src","alt","width","height","objectFit","borderRadius","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["D:/IaaC/DataVis/data_vis_project/code/interactive-map/src/components/StreetView.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { StreetView as StreetViewContainer, GraphLoadingMessage, AssetIDcontainer, AssetIDTextArea, AssetIDConfirmButton } from '../style_Desire';\r\n\r\nconst StreetView = ({ coordinates, onError }) => {\r\n    const [image, setImage] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [selectedId, setSelectedId] = useState(\"\");\r\n\r\n    const handleConfirmSelection = async () => {\r\n        if (!selectedId) {\r\n            alert(\"Please enter an Asset ID\");\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const response = await fetch(\"http://127.0.0.1:5000/register-point\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ id: selectedId }),\r\n            });\r\n\r\n            const data = await response.json();\r\n            if (data.error) {\r\n                throw new Error(data.error);\r\n            }\r\n\r\n            if (data.streetView && data.streetView.image) {\r\n                setImage(`data:image/jpeg;base64,${data.streetView.image}`);\r\n            } else {\r\n                throw new Error('No street view available for this location');\r\n            }\r\n        } catch (err) {\r\n            setError(err.message);\r\n            if (onError) onError(err.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchStreetView = async () => {\r\n        if (!coordinates || !coordinates.latitude || !coordinates.longitude) {\r\n            setError('No coordinates provided');\r\n            if (onError) onError('No coordinates provided');\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const response = await fetch('http://127.0.0.1:5000/get-street-view', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(coordinates),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Failed to fetch street view');\r\n            }\r\n\r\n            if (data.image) {\r\n                setImage(`data:image/jpeg;base64,${data.image}`);\r\n            } else {\r\n                throw new Error('No image data received');\r\n            }\r\n        } catch (err) {\r\n            setError(err.message);\r\n            if (onError) onError(err.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Fetch street view when coordinates change\r\n    React.useEffect(() => {\r\n        if (coordinates) {\r\n            fetchStreetView();\r\n        }\r\n    }, [coordinates]);\r\n\r\n    return (\r\n        <StreetViewContainer>\r\n            {isLoading && <GraphLoadingMessage>Loading street view...</GraphLoadingMessage>}\r\n            {error && (\r\n                <div style={{ color: 'red', textAlign: 'center', padding: '20px' }}>\r\n                    {error}\r\n                </div>\r\n            )}\r\n            {image ? (\r\n                <img\r\n                    src={image}\r\n                    alt=\"Street View\"\r\n                    style={{\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        objectFit: 'cover',\r\n                        borderRadius: '8px'\r\n                    }}\r\n                />\r\n            ) : (\r\n                <div style={{ textAlign: 'center', padding: '20px', color: '#666' }}>\r\n                    No street view available for this location\r\n                </div>\r\n            )}\r\n\r\n            <AssetIDcontainer>\r\n                <AssetIDTextArea\r\n                    placeholder=\"Enter Asset ID here\"\r\n                    value={selectedId}\r\n                    onChange={(e) => setSelectedId(e.target.value)}\r\n                />\r\n                <AssetIDConfirmButton onClick={handleConfirmSelection}>\r\n                    Confirm Selection\r\n                </AssetIDConfirmButton>\r\n            </AssetIDcontainer>\r\n        </StreetViewContainer>\r\n    );\r\n};\r\n\r\nexport default StreetView; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,UAAU,IAAIC,mBAAmB,EAAEC,mBAAmB,EAAEC,gBAAgB,EAAEC,eAAe,EAAEC,oBAAoB,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElJ,MAAMP,UAAU,GAAGA,CAAC;EAAEQ,WAAW;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACkB,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMoB,sBAAsB,GAAG,MAAAA,CAAA,KAAY;IACvC,IAAI,CAACF,UAAU,EAAE;MACbG,KAAK,CAAC,0BAA0B,CAAC;MACjC;IACJ;IAEAN,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACA,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;QACjEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,EAAE,EAAEX;QAAW,CAAC;MAC3C,CAAC,CAAC;MAEF,MAAMY,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,CAACd,KAAK,EAAE;QACZ,MAAM,IAAIgB,KAAK,CAACF,IAAI,CAACd,KAAK,CAAC;MAC/B;MAEA,IAAIc,IAAI,CAACG,UAAU,IAAIH,IAAI,CAACG,UAAU,CAACrB,KAAK,EAAE;QAC1CC,QAAQ,CAAC,0BAA0BiB,IAAI,CAACG,UAAU,CAACrB,KAAK,EAAE,CAAC;MAC/D,CAAC,MAAM;QACH,MAAM,IAAIoB,KAAK,CAAC,4CAA4C,CAAC;MACjE;IACJ,CAAC,CAAC,OAAOE,GAAG,EAAE;MACVjB,QAAQ,CAACiB,GAAG,CAACC,OAAO,CAAC;MACrB,IAAIzB,OAAO,EAAEA,OAAO,CAACwB,GAAG,CAACC,OAAO,CAAC;IACrC,CAAC,SAAS;MACNpB,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;EAED,MAAMqB,eAAe,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,CAAC3B,WAAW,IAAI,CAACA,WAAW,CAAC4B,QAAQ,IAAI,CAAC5B,WAAW,CAAC6B,SAAS,EAAE;MACjErB,QAAQ,CAAC,yBAAyB,CAAC;MACnC,IAAIP,OAAO,EAAEA,OAAO,CAAC,yBAAyB,CAAC;MAC/C;IACJ;IAEAK,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACA,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;QAClEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACnB,WAAW;MACpC,CAAC,CAAC;MAEF,MAAMqB,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAElC,IAAI,CAACT,QAAQ,CAACiB,EAAE,EAAE;QACd,MAAM,IAAIP,KAAK,CAACF,IAAI,CAACd,KAAK,IAAI,6BAA6B,CAAC;MAChE;MAEA,IAAIc,IAAI,CAAClB,KAAK,EAAE;QACZC,QAAQ,CAAC,0BAA0BiB,IAAI,CAAClB,KAAK,EAAE,CAAC;MACpD,CAAC,MAAM;QACH,MAAM,IAAIoB,KAAK,CAAC,wBAAwB,CAAC;MAC7C;IACJ,CAAC,CAAC,OAAOE,GAAG,EAAE;MACVjB,QAAQ,CAACiB,GAAG,CAACC,OAAO,CAAC;MACrB,IAAIzB,OAAO,EAAEA,OAAO,CAACwB,GAAG,CAACC,OAAO,CAAC;IACrC,CAAC,SAAS;MACNpB,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;;EAED;EACAhB,KAAK,CAACyC,SAAS,CAAC,MAAM;IAClB,IAAI/B,WAAW,EAAE;MACb2B,eAAe,CAAC,CAAC;IACrB;EACJ,CAAC,EAAE,CAAC3B,WAAW,CAAC,CAAC;EAEjB,oBACID,OAAA,CAACN,mBAAmB;IAAAuC,QAAA,GACf3B,SAAS,iBAAIN,OAAA,CAACL,mBAAmB;MAAAsC,QAAA,EAAC;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAqB,CAAC,EAC9E7B,KAAK,iBACFR,OAAA;MAAKsC,KAAK,EAAE;QAAEC,KAAK,EAAE,KAAK;QAAEC,SAAS,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAAO,CAAE;MAAAR,QAAA,EAC9DzB;IAAK;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CACR,EACAjC,KAAK,gBACFJ,OAAA;MACI0C,GAAG,EAAEtC,KAAM;MACXuC,GAAG,EAAC,aAAa;MACjBL,KAAK,EAAE;QACHM,KAAK,EAAE,MAAM;QACbC,MAAM,EAAE,MAAM;QACdC,SAAS,EAAE,OAAO;QAClBC,YAAY,EAAE;MAClB;IAAE;MAAAb,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,gBAEFrC,OAAA;MAAKsC,KAAK,EAAE;QAAEE,SAAS,EAAE,QAAQ;QAAEC,OAAO,EAAE,MAAM;QAAEF,KAAK,EAAE;MAAO,CAAE;MAAAN,QAAA,EAAC;IAErE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CACR,eAEDrC,OAAA,CAACJ,gBAAgB;MAAAqC,QAAA,gBACbjC,OAAA,CAACH,eAAe;QACZmD,WAAW,EAAC,qBAAqB;QACjCC,KAAK,EAAEvC,UAAW;QAClBwC,QAAQ,EAAGC,CAAC,IAAKxC,aAAa,CAACwC,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClD,CAAC,eACFrC,OAAA,CAACF,oBAAoB;QAACuD,OAAO,EAAEzC,sBAAuB;QAAAqB,QAAA,EAAC;MAEvD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAsB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAE9B,CAAC;AAAClC,EAAA,CA1HIV,UAAU;AAAA6D,EAAA,GAAV7D,UAAU;AA4HhB,eAAeA,UAAU;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}